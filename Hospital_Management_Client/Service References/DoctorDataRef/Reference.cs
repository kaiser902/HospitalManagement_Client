//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalManagement_Client.DoctorDataRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataModelLib")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(HospitalManagement_Client.DoctorDataRef.Doctor))]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Doctor", Namespace="http://schemas.datacontract.org/2004/07/DataModelLib")]
    [System.SerializableAttribute()]
    public partial class Doctor : HospitalManagement_Client.DoctorDataRef.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DoctorDataRef.IDoctorDataService")]
    public interface IDoctorDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetDoctorList", ReplyAction="http://tempuri.org/IDoctorDataService/GetDoctorListResponse")]
        System.Data.DataSet GetDoctorList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetDoctorList", ReplyAction="http://tempuri.org/IDoctorDataService/GetDoctorListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Add_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Add_DoctorResponse")]
        int Add_Doctor(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Add_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Add_DoctorResponse")]
        System.Threading.Tasks.Task<int> Add_DoctorAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Update_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Update_DoctorResponse")]
        int Update_Doctor(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Update_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Update_DoctorResponse")]
        System.Threading.Tasks.Task<int> Update_DoctorAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Delete_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Delete_DoctorResponse")]
        void Delete_Doctor(string docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/Delete_Doctor", ReplyAction="http://tempuri.org/IDoctorDataService/Delete_DoctorResponse")]
        System.Threading.Tasks.Task Delete_DoctorAsync(string docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetRegions", ReplyAction="http://tempuri.org/IDoctorDataService/GetRegionsResponse")]
        string[] GetRegions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetRegions", ReplyAction="http://tempuri.org/IDoctorDataService/GetRegionsResponse")]
        System.Threading.Tasks.Task<string[]> GetRegionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/AuthenticateDoctorByRegion", ReplyAction="http://tempuri.org/IDoctorDataService/AuthenticateDoctorByRegionResponse")]
        string AuthenticateDoctorByRegion(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/AuthenticateDoctorByRegion", ReplyAction="http://tempuri.org/IDoctorDataService/AuthenticateDoctorByRegionResponse")]
        System.Threading.Tasks.Task<string> AuthenticateDoctorByRegionAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetDoctorIdByRegion", ReplyAction="http://tempuri.org/IDoctorDataService/GetDoctorIdByRegionResponse")]
        string GetDoctorIdByRegion(string region);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/GetDoctorIdByRegion", ReplyAction="http://tempuri.org/IDoctorDataService/GetDoctorIdByRegionResponse")]
        System.Threading.Tasks.Task<string> GetDoctorIdByRegionAsync(string region);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/VerifyDoctor", ReplyAction="http://tempuri.org/IDoctorDataService/VerifyDoctorResponse")]
        int VerifyDoctor(string docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorDataService/VerifyDoctor", ReplyAction="http://tempuri.org/IDoctorDataService/VerifyDoctorResponse")]
        System.Threading.Tasks.Task<int> VerifyDoctorAsync(string docId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorDataServiceChannel : HospitalManagement_Client.DoctorDataRef.IDoctorDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoctorDataServiceClient : System.ServiceModel.ClientBase<HospitalManagement_Client.DoctorDataRef.IDoctorDataService>, HospitalManagement_Client.DoctorDataRef.IDoctorDataService {
        
        public DoctorDataServiceClient() {
        }
        
        public DoctorDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DoctorDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetDoctorList() {
            return base.Channel.GetDoctorList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDoctorListAsync() {
            return base.Channel.GetDoctorListAsync();
        }
        
        public int Add_Doctor(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.Add_Doctor(_docUser);
        }
        
        public System.Threading.Tasks.Task<int> Add_DoctorAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.Add_DoctorAsync(_docUser);
        }
        
        public int Update_Doctor(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.Update_Doctor(_docUser);
        }
        
        public System.Threading.Tasks.Task<int> Update_DoctorAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.Update_DoctorAsync(_docUser);
        }
        
        public void Delete_Doctor(string docId) {
            base.Channel.Delete_Doctor(docId);
        }
        
        public System.Threading.Tasks.Task Delete_DoctorAsync(string docId) {
            return base.Channel.Delete_DoctorAsync(docId);
        }
        
        public string[] GetRegions() {
            return base.Channel.GetRegions();
        }
        
        public System.Threading.Tasks.Task<string[]> GetRegionsAsync() {
            return base.Channel.GetRegionsAsync();
        }
        
        public string AuthenticateDoctorByRegion(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.AuthenticateDoctorByRegion(_docUser);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateDoctorByRegionAsync(HospitalManagement_Client.DoctorDataRef.Doctor _docUser) {
            return base.Channel.AuthenticateDoctorByRegionAsync(_docUser);
        }
        
        public string GetDoctorIdByRegion(string region) {
            return base.Channel.GetDoctorIdByRegion(region);
        }
        
        public System.Threading.Tasks.Task<string> GetDoctorIdByRegionAsync(string region) {
            return base.Channel.GetDoctorIdByRegionAsync(region);
        }
        
        public int VerifyDoctor(string docId) {
            return base.Channel.VerifyDoctor(docId);
        }
        
        public System.Threading.Tasks.Task<int> VerifyDoctorAsync(string docId) {
            return base.Channel.VerifyDoctorAsync(docId);
        }
    }
}
