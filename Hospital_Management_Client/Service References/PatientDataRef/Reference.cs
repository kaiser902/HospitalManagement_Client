//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalManagement_Client.PatientDataRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/DataModelLib")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocId {
            get {
                return this.DocIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DocIdField, value) != true)) {
                    this.DocIdField = value;
                    this.RaisePropertyChanged("DocId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Report", Namespace="http://schemas.datacontract.org/2004/07/DataModelLib")]
    [System.SerializableAttribute()]
    public partial class Report : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReportIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTimeField, value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReportId {
            get {
                return this.ReportIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportIdField, value) != true)) {
                    this.ReportIdField = value;
                    this.RaisePropertyChanged("ReportId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientDataRef.IPatientDataService")]
    public interface IPatientDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetPatientList", ReplyAction="http://tempuri.org/IPatientDataService/GetPatientListResponse")]
        System.Data.DataSet GetPatientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetPatientList", ReplyAction="http://tempuri.org/IPatientDataService/GetPatientListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetPatientListByDocId", ReplyAction="http://tempuri.org/IPatientDataService/GetPatientListByDocIdResponse")]
        System.Data.DataSet GetPatientListByDocId(string DocId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetPatientListByDocId", ReplyAction="http://tempuri.org/IPatientDataService/GetPatientListByDocIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPatientListByDocIdAsync(string DocId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/CheckPatientForDoctor", ReplyAction="http://tempuri.org/IPatientDataService/CheckPatientForDoctorResponse")]
        int CheckPatientForDoctor(string DocId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/CheckPatientForDoctor", ReplyAction="http://tempuri.org/IPatientDataService/CheckPatientForDoctorResponse")]
        System.Threading.Tasks.Task<int> CheckPatientForDoctorAsync(string DocId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Add_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Add_PatientResponse")]
        int Add_Patient(HospitalManagement_Client.PatientDataRef.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Add_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Add_PatientResponse")]
        System.Threading.Tasks.Task<int> Add_PatientAsync(HospitalManagement_Client.PatientDataRef.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Update_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Update_PatientResponse")]
        int Update_Patient(HospitalManagement_Client.PatientDataRef.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Update_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Update_PatientResponse")]
        System.Threading.Tasks.Task<int> Update_PatientAsync(HospitalManagement_Client.PatientDataRef.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Delete_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Delete_PatientResponse")]
        int Delete_Patient(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Delete_Patient", ReplyAction="http://tempuri.org/IPatientDataService/Delete_PatientResponse")]
        System.Threading.Tasks.Task<int> Delete_PatientAsync(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Add_Report", ReplyAction="http://tempuri.org/IPatientDataService/Add_ReportResponse")]
        int Add_Report(HospitalManagement_Client.PatientDataRef.Report _report, string _commandText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/Add_Report", ReplyAction="http://tempuri.org/IPatientDataService/Add_ReportResponse")]
        System.Threading.Tasks.Task<int> Add_ReportAsync(HospitalManagement_Client.PatientDataRef.Report _report, string _commandText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetXrayData", ReplyAction="http://tempuri.org/IPatientDataService/GetXrayDataResponse")]
        System.Data.DataSet GetXrayData(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetXrayData", ReplyAction="http://tempuri.org/IPatientDataService/GetXrayDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetXrayDataAsync(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetEcgData", ReplyAction="http://tempuri.org/IPatientDataService/GetEcgDataResponse")]
        System.Data.DataSet GetEcgData(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetEcgData", ReplyAction="http://tempuri.org/IPatientDataService/GetEcgDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEcgDataAsync(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetMriData", ReplyAction="http://tempuri.org/IPatientDataService/GetMriDataResponse")]
        System.Data.DataSet GetMriData(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetMriData", ReplyAction="http://tempuri.org/IPatientDataService/GetMriDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMriDataAsync(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getXrayImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getXrayImgLocationResponse")]
        string getXrayImgLocation(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getXrayImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getXrayImgLocationResponse")]
        System.Threading.Tasks.Task<string> getXrayImgLocationAsync(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getEcgImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getEcgImgLocationResponse")]
        string getEcgImgLocation(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getEcgImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getEcgImgLocationResponse")]
        System.Threading.Tasks.Task<string> getEcgImgLocationAsync(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getMriImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getMriImgLocationResponse")]
        string getMriImgLocation(string patient_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/getMriImgLocation", ReplyAction="http://tempuri.org/IPatientDataService/getMriImgLocationResponse")]
        System.Threading.Tasks.Task<string> getMriImgLocationAsync(string patient_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientDataServiceChannel : HospitalManagement_Client.PatientDataRef.IPatientDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientDataServiceClient : System.ServiceModel.ClientBase<HospitalManagement_Client.PatientDataRef.IPatientDataService>, HospitalManagement_Client.PatientDataRef.IPatientDataService {
        
        public PatientDataServiceClient() {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetPatientList() {
            return base.Channel.GetPatientList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientListAsync() {
            return base.Channel.GetPatientListAsync();
        }
        
        public System.Data.DataSet GetPatientListByDocId(string DocId) {
            return base.Channel.GetPatientListByDocId(DocId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPatientListByDocIdAsync(string DocId) {
            return base.Channel.GetPatientListByDocIdAsync(DocId);
        }
        
        public int CheckPatientForDoctor(string DocId) {
            return base.Channel.CheckPatientForDoctor(DocId);
        }
        
        public System.Threading.Tasks.Task<int> CheckPatientForDoctorAsync(string DocId) {
            return base.Channel.CheckPatientForDoctorAsync(DocId);
        }
        
        public int Add_Patient(HospitalManagement_Client.PatientDataRef.Patient _patient) {
            return base.Channel.Add_Patient(_patient);
        }
        
        public System.Threading.Tasks.Task<int> Add_PatientAsync(HospitalManagement_Client.PatientDataRef.Patient _patient) {
            return base.Channel.Add_PatientAsync(_patient);
        }
        
        public int Update_Patient(HospitalManagement_Client.PatientDataRef.Patient _patient) {
            return base.Channel.Update_Patient(_patient);
        }
        
        public System.Threading.Tasks.Task<int> Update_PatientAsync(HospitalManagement_Client.PatientDataRef.Patient _patient) {
            return base.Channel.Update_PatientAsync(_patient);
        }
        
        public int Delete_Patient(string patientId) {
            return base.Channel.Delete_Patient(patientId);
        }
        
        public System.Threading.Tasks.Task<int> Delete_PatientAsync(string patientId) {
            return base.Channel.Delete_PatientAsync(patientId);
        }
        
        public int Add_Report(HospitalManagement_Client.PatientDataRef.Report _report, string _commandText) {
            return base.Channel.Add_Report(_report, _commandText);
        }
        
        public System.Threading.Tasks.Task<int> Add_ReportAsync(HospitalManagement_Client.PatientDataRef.Report _report, string _commandText) {
            return base.Channel.Add_ReportAsync(_report, _commandText);
        }
        
        public System.Data.DataSet GetXrayData(string patient_id) {
            return base.Channel.GetXrayData(patient_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetXrayDataAsync(string patient_id) {
            return base.Channel.GetXrayDataAsync(patient_id);
        }
        
        public System.Data.DataSet GetEcgData(string patient_id) {
            return base.Channel.GetEcgData(patient_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEcgDataAsync(string patient_id) {
            return base.Channel.GetEcgDataAsync(patient_id);
        }
        
        public System.Data.DataSet GetMriData(string patient_id) {
            return base.Channel.GetMriData(patient_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMriDataAsync(string patient_id) {
            return base.Channel.GetMriDataAsync(patient_id);
        }
        
        public string getXrayImgLocation(string patient_id) {
            return base.Channel.getXrayImgLocation(patient_id);
        }
        
        public System.Threading.Tasks.Task<string> getXrayImgLocationAsync(string patient_id) {
            return base.Channel.getXrayImgLocationAsync(patient_id);
        }
        
        public string getEcgImgLocation(string patient_id) {
            return base.Channel.getEcgImgLocation(patient_id);
        }
        
        public System.Threading.Tasks.Task<string> getEcgImgLocationAsync(string patient_id) {
            return base.Channel.getEcgImgLocationAsync(patient_id);
        }
        
        public string getMriImgLocation(string patient_id) {
            return base.Channel.getMriImgLocation(patient_id);
        }
        
        public System.Threading.Tasks.Task<string> getMriImgLocationAsync(string patient_id) {
            return base.Channel.getMriImgLocationAsync(patient_id);
        }
    }
}
